use tracing::trace;

use async_language_server::{
    lsp_types::{Hover, HoverContents, MarkupContent, MarkupKind},
    server::{Document, ServerResult},
    tree_sitter::Node,
    tree_sitter_utils::ts_range_to_lsp_range,
};

use crate::shared::MarkdownBuilder;
use parser::cargo;

use super::Clients;

pub async fn get_cargo_hover(
    clients: &Clients,
    doc: &Document,
    node: Node<'_>,
) -> ServerResult<Option<Hover>> {
    let Some(dep) = cargo::parse_dependency(doc, node) else {
        return Ok(None);
    };

    let (dependency_name, dependency_version) = dep.text(doc);

    // Add basic hover information with version and name
    trace!("Hovering: {dependency_name} version {dependency_version}");
    let mut md = MarkdownBuilder::new();
    md.h2(&dependency_name);
    md.version(dependency_version);

    // Try to fetch additional information from the index - description, links
    trace!("Fetching crate data from crates.io");
    if let Ok(crate_data) = clients
        .crates
        .get_crate_data(&dependency_name)
        .await
        .map(|c| c.inner)
    {
        md.br();
        md.p(crate_data.description);

        // Ignore homepage or docs if it's the same as the repo
        let mut docs = crate_data.links.documentation.as_deref();
        let mut page = crate_data.links.homepage.as_deref();
        let repo = crate_data.links.repository.as_deref();
        if page == repo {
            page = None;
        }
        if docs == repo {
            docs = None;
        }

        // Add links to documentation, repo, and homepage
        let docs_rs = format!("https://docs.rs/{}", crate_data.name);
        md.br();
        md.h3("Links");
        if let Some(docs) = docs {
            md.a("Documentation", docs);
            if !docs.contains("docs.rs") {
                // docs.rs is the standard for autogenerated documentation
                // for any rust crate, so we always provide it at the end,
                // will be formatted like "- Documentation (docs.rs)" with
                // both of those links being clickable by the user
                md.extend_last(format!(" ([docs.rs]({docs_rs}))"));
            }
        } else {
            md.a("Documentation", docs_rs);
        }
        if let Some(repo) = repo {
            md.a("Repository", repo);
        }
        if let Some(page) = page {
            md.a("Homepage", page);
        }
    }

    Ok(Some(Hover {
        range: Some(ts_range_to_lsp_range(node.range())),
        contents: HoverContents::Markup(MarkupContent {
            kind: MarkupKind::Markdown,
            value: md.build(),
        }),
    }))
}
